<div><p style="text-align: center;" ><span style="font-size:16pt;" ><strong>数据库(源)路由及分库实现方式介绍 </strong></span></p><p>数据库路由是分库的基础，大型网站一般通过此方式实现分库，减轻数据库压力，提高数据层访问能力。本文主要介绍普通数据库连接方式，及数据库路由的常见两种实现方式。</p><p><span style="line-height: 20px; font-size: 10pt;" >普通数据库连接</span></p><p>1、普通数据源连接介绍。无数据库源路由，访问示意图如下： </p><p style="text-align: right;" ><img title="数据库(源)路由及分库实现方式介绍 - gubaojian - 去创新 去开创 为世界之光" src="http://img0.ph.126.net/PiXZu0Hpnc_jM_Z6VoAo7Q==/6598248443122571730.jpg" alt="" > </p><p style="text-align: center;" >1.1正常连接时序图 </p><span style="line-height: 20px; font-size: 10pt;" ><b>二、数据库路由及分库的实现方式</b></span><br><ol><li><div><span style="font-size:10pt;" >基于ConnectionProxy虚拟连接，延迟真实连接的方式实现。 </span></div><p><span style="font-size:10pt;" >这种实现方式，在获取连接时返回一个ConnectionProxy（实现connection接口的虚拟连接），在sql执行时根据sql执行参数选择实际数据源的连接，从而实现分库的功能。其原理图如下： </span></p><p style="text-align: center;" ></p><div><img title="数据库(源)路由及分库实现方式介绍 - gubaojian - 去创新 去开创 为世界之光" alt="数据库(源)路由及分库实现方式介绍 - gubaojian - 去创新 去开创 为世界之光" style="margin: 0px 10px 0px 0px; width: 750px; height: auto;" src="http://img2.ph.126.net/RmK__x8tcB18aIW1Mv9dYg==/6597526063983338900.jpg" ></div>&nbsp;<p style="text-align: center;" ><span style="font-size:10pt;" >2.1 ConnectionProxy延迟连接实现数据源路由时序图 </span></p><p><span style="font-size:10pt;" >优点：功能强大，不如可以实现路由数据源，实现分库功能，也可在路由数据源时对sql语句进行处理，实现分表的功能。 </span></p><p><span style="font-size:10pt;" >缺点：实现复杂，过于底层，对所有语句都执行对应的逻辑。 </span></p></li><li><div><span style="font-size:10pt;" >基于InterfaceProxy接口代理的方式实现数据源路由及分库分表。 </span></div><p><span style="font-size:10pt;" >这种方式通过创建DAO层的代理，拦截DAO层的操作。根据参数选择数据源，然后将操作委托于实际DAO层执行。其时序图如下： </span></p><p style="text-align: center;" ></p><div style="text-align: left;" ><img title="数据库(源)路由及分库实现方式介绍 - gubaojian - 去创新 去开创 为世界之光" alt="数据库(源)路由及分库实现方式介绍 - gubaojian - 去创新 去开创 为世界之光" style="margin: 0px 10px 0px 0px; width: auto; height: auto; float: none;" src="http://img0.ph.126.net/K5EWegW8xsPF9UBQfLodvA==/6598233049959784701.jpg" ></div>&nbsp;<p style="text-align: center;" ><span style="font-size:10pt;" >3.1 InterfaceProxy接口代理实现数据源路由时序图 </span></p><p><span style="font-size:10pt;" >优点：实现简单、可有选择的进行数据源路由；不修改现有框架，上层封装即可实现路由。 </span></p><p><span style="font-size:10pt;" >缺点：依赖于接口代理，仅支持接口代理。难以支持事务，通用性低。 </span></p><p><span style="font-size:10pt;" > </span>&nbsp;</p></li></ol></div>
